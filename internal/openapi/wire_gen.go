// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package openapi

import (
	"github.com/crazyfrankie/voidx/internal/app"
	"github.com/crazyfrankie/voidx/internal/app_config"
	"github.com/crazyfrankie/voidx/internal/conversation"
	"github.com/crazyfrankie/voidx/internal/core/agent"
	"github.com/crazyfrankie/voidx/internal/core/memory"
	"github.com/crazyfrankie/voidx/internal/llm"
	"github.com/crazyfrankie/voidx/internal/openapi/handler"
	"github.com/crazyfrankie/voidx/internal/openapi/repository"
	"github.com/crazyfrankie/voidx/internal/openapi/repository/dao"
	"github.com/crazyfrankie/voidx/internal/openapi/service"
	"github.com/crazyfrankie/voidx/internal/retriever"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitOpenAIModule(db *gorm.DB, conversationSvc *conversation.ConversationModule, retrieverModule *retriever.RetrieverModule, llmModule *llm.LLMModule, appConfig *app_config.AppConfigModule, appModule *app.AppModule, agent2 *agent.AgentQueueManagerFactory, token *memory.TokenBufferMemory) *OpenAPIModule {
	openAPIDao := dao.NewOpenAPIDao(db)
	openAPIRepo := repository.NewOpenAPIRepo(openAPIDao)
	conversationService := conversationSvc.Service
	retrievalService := retrieverModule.Service
	llmService := llmModule.Service
	appConfigService := appConfig.Service
	appService := appModule.Service
	openAPIService := service.NewOpenAPIService(openAPIRepo, conversationService, retrievalService, llmService, appConfigService, appService, agent2, token)
	openAPIHandler := handler.NewOpenAPIHandler(openAPIService)
	openAPIModule := &OpenAPIModule{
		Handler: openAPIHandler,
	}
	return openAPIModule
}

// wire.go:

type Handler = handler.OpenAPIHandler

type OpenAPIModule struct {
	Handler *Handler
}

var ProviderSet = wire.NewSet(dao.NewOpenAPIDao, repository.NewOpenAPIRepo, service.NewOpenAPIService, handler.NewOpenAPIHandler)

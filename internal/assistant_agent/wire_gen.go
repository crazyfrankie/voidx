// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package assistant_agent

import (
	"github.com/crazyfrankie/voidx/internal/assistant_agent/handler"
	"github.com/crazyfrankie/voidx/internal/assistant_agent/repository"
	"github.com/crazyfrankie/voidx/internal/assistant_agent/repository/dao"
	"github.com/crazyfrankie/voidx/internal/assistant_agent/service"
	"github.com/crazyfrankie/voidx/internal/assistant_agent/task"
	"github.com/crazyfrankie/voidx/internal/conversation"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitAssistantModule(db *gorm.DB, conversationSvc *conversation.ConversationModule) *AssistantModule {
	assistantAgentDao := dao.NewAssistantAgentDao(db)
	assistantAgentRepo := repository.NewAssistantAgentRepo(assistantAgentDao)
	conversationService := conversationSvc.Service
	appProducer := InitProducer()
	assistantAgentService := service.NewAssistantAgentService(assistantAgentRepo, conversationService, appProducer)
	assistantAgentHandler := handler.NewAssistantAgentHandler(assistantAgentService)
	assistantModule := &AssistantModule{
		Handler: assistantAgentHandler,
	}
	return assistantModule
}

// wire.go:

type Handler = handler.AssistantAgentHandler

type AssistantModule struct {
	Handler *Handler
}

var ProviderSet = wire.NewSet(dao.NewAssistantAgentDao, repository.NewAssistantAgentRepo, service.NewAssistantAgentService, handler.NewAssistantAgentHandler)

func InitProducer() *task.AppProducer {
	producer, err := task.NewAppProducer([]string{})
	if err != nil {
		panic(err)
	}

	return producer
}

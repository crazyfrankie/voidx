// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package retriever

import (
	"github.com/crazyfrankie/voidx/internal/core/embedding"
	"github.com/crazyfrankie/voidx/internal/core/retrievers"
	"github.com/crazyfrankie/voidx/internal/retriever/repository"
	"github.com/crazyfrankie/voidx/internal/retriever/repository/cache"
	"github.com/crazyfrankie/voidx/internal/retriever/repository/dao"
	"github.com/crazyfrankie/voidx/internal/retriever/service"
	"github.com/crazyfrankie/voidx/pkg/langchainx/milvus"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitRetrieverModule 初始化检索模块
func InitRetrieverModule(db *gorm.DB, cmd redis.Cmdable, vectorStore *milvus.Store, embedding2 *embedding.EmbeddingService, jiebaService *retrievers.JiebaService) *RetrieverModule {
	keywordDao := dao.NewKeywordDao(db)
	keyWordCache := cache.NewKeyWordCache(cmd)
	keywordRepository := repository.NewKeywordRepository(keywordDao, keyWordCache)
	keywordService := service.NewKeywordService(keywordRepository)
	retrieverFactory := initRetrieverFactory(db, vectorStore, embedding2, jiebaService)
	retrievalService := service.NewRetrievalService(retrieverFactory)
	retrieverModule := &RetrieverModule{
		KeyWord: keywordService,
		Service: retrievalService,
	}
	return retrieverModule
}

// wire.go:

type KeyWordService = service.KeywordService

type Service = service.RetrievalService

type RetrieverModule struct {
	KeyWord *KeyWordService
	Service *Service
}

// initRetrieverFactory 初始化检索器工厂
func initRetrieverFactory(db *gorm.DB, vectorStore *milvus.Store, embedding2 *embedding.EmbeddingService, jiebaService *retrievers.JiebaService) *retrievers.RetrieverFactory {
	return retrievers.NewRetrieverFactory(db, vectorStore, embedding2, jiebaService)
}

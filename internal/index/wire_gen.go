// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package index

import (
	"github.com/crazyfrankie/voidx/infra/contract/document/vecstore"
	"github.com/crazyfrankie/voidx/internal/core/embedding"
	"github.com/crazyfrankie/voidx/internal/core/file_extractor"
	"github.com/crazyfrankie/voidx/internal/core/retrievers"
	"github.com/crazyfrankie/voidx/internal/index/repository"
	"github.com/crazyfrankie/voidx/internal/index/repository/dao"
	"github.com/crazyfrankie/voidx/internal/index/service"
	"github.com/crazyfrankie/voidx/internal/process_rule"
	"github.com/crazyfrankie/voidx/internal/retriever"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitIndexModule(db *gorm.DB, cmd redis.Cmdable, fileExtractor *file_extractor.FileExtractor, embeddingsSvc *embedding.EmbeddingService, jiebaService *retrievers.JiebaService, processRuleService *process_rule.ProcessRuleModule, keywordSvc *retriever.RetrieverModule, vectorDatabaseService vecstore.SearchStore) *IndexModule {
	indexingDao := dao.NewIndexingDao(db)
	indexingRepo := repository.NewIndexingRepo(indexingDao)
	serviceProcessRuleService := processRuleService.Service
	keywordService := keywordSvc.KeyWord
	indexingService := service.NewIndexingService(indexingRepo, cmd, fileExtractor, serviceProcessRuleService, embeddingsSvc, jiebaService, keywordService, vectorDatabaseService)
	indexModule := &IndexModule{
		Service: indexingService,
	}
	return indexModule
}

// wire.go:

type Service = service.IndexingService

type IndexModule struct {
	Service *Service
}

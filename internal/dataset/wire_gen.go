// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dataset

import (
	"github.com/crazyfrankie/voidx/internal/dataset/handler"
	"github.com/crazyfrankie/voidx/internal/dataset/repository"
	"github.com/crazyfrankie/voidx/internal/dataset/repository/dao"
	"github.com/crazyfrankie/voidx/internal/dataset/service"
	"github.com/crazyfrankie/voidx/internal/retriever"
	"github.com/crazyfrankie/voidx/internal/segment"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitDatasetHandler(db *gorm.DB, retrieverModule *retriever.RetrieverModule, segmentModule *segment.SegmentModule) *DataSetModule {
	datasetDao := dao.NewDatasetDao(db)
	datasetRepo := repository.NewDatasetRepo(datasetDao)
	retrievalService := retrieverModule.Service
	segmentService := segmentModule.Service
	datasetProducer := InitProducer()
	datasetService := service.NewDatasetService(datasetRepo, retrievalService, segmentService, datasetProducer)
	datasetHandler := handler.NewDatasetHandler(datasetService)
	dataSetModule := &DataSetModule{
		Handler: datasetHandler,
		Service: datasetService,
	}
	return dataSetModule
}

// wire.go:

type Handler = handler.DatasetHandler

type Service = service.DatasetService

type DataSetModule struct {
	Handler *Handler
	Service *Service
}

var DatasetSet = wire.NewSet(dao.NewDatasetDao, repository.NewDatasetRepo, service.NewDatasetService, handler.NewDatasetHandler)

func InitProducer() *service.DatasetProducer {
	producer, err := service.NewDatasetProducer([]string{})
	if err != nil {
		panic(err)
	}

	return producer
}

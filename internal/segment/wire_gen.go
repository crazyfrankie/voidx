// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package segment

import (
	"github.com/crazyfrankie/voidx/internal/core/embedding"
	"github.com/crazyfrankie/voidx/internal/core/retrievers"
	"github.com/crazyfrankie/voidx/internal/retriever"
	"github.com/crazyfrankie/voidx/internal/segment/handler"
	"github.com/crazyfrankie/voidx/internal/segment/repository"
	"github.com/crazyfrankie/voidx/internal/segment/repository/dao"
	"github.com/crazyfrankie/voidx/internal/segment/service"
	"github.com/crazyfrankie/voidx/internal/vecstore"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitSegmentModule(db *gorm.DB, embeddings *embedding.EmbeddingService, jiebaSvc *retrievers.JiebaService, vecSvc *vecstore.VecStoreService, keywordSvc *retriever.RetrieverModule) *SegmentModule {
	segmentDao := dao.NewSegmentDao(db)
	segmentRepo := repository.NewSegmentRepo(segmentDao)
	keywordService := keywordSvc.KeyWord
	segmentService := service.NewSegmentService(segmentRepo, embeddings, jiebaSvc, vecSvc, keywordService)
	segmentHandler := handler.NewSegmentHandler(segmentService)
	segmentModule := &SegmentModule{
		Handler: segmentHandler,
		Service: segmentService,
	}
	return segmentModule
}

// wire.go:

type Handler = handler.SegmentHandler

type Service = service.SegmentService

type SegmentModule struct {
	Handler *Handler
	Service *Service
}

var SegmentSet = wire.NewSet(dao.NewSegmentDao, repository.NewSegmentRepo, service.NewSegmentService, handler.NewSegmentHandler)

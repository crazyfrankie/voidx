// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package webapp

import (
	"github.com/crazyfrankie/voidx/internal/app_config"
	"github.com/crazyfrankie/voidx/internal/conversation"
	"github.com/crazyfrankie/voidx/internal/core/agent"
	"github.com/crazyfrankie/voidx/internal/core/memory"
	"github.com/crazyfrankie/voidx/internal/llm"
	"github.com/crazyfrankie/voidx/internal/retriever"
	"github.com/crazyfrankie/voidx/internal/webapp/handler"
	"github.com/crazyfrankie/voidx/internal/webapp/repository"
	"github.com/crazyfrankie/voidx/internal/webapp/repository/dao"
	"github.com/crazyfrankie/voidx/internal/webapp/service"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitWebAppModule(db *gorm.DB, tokenBufMem *memory.TokenBufferMemory, appConfigModule *app_config.AppConfigModule, conversationModule *conversation.ConversationModule, llmModule *llm.LLMModule, agentManager *agent.AgentQueueManager, retrievalModule *retriever.RetrieverModule) *WebAppModule {
	webAppDao := dao.NewWebAppDao(db)
	webAppRepo := repository.NewWebAppRepo(webAppDao)
	appConfigService := appConfigModule.Service
	conversationService := conversationModule.Service
	llmService := llmModule.Service
	retrievalService := retrievalModule.Service
	webAppService := service.NewWebAppService(webAppRepo, appConfigService, conversationService, llmService, retrievalService, tokenBufMem, agentManager)
	webAppHandler := handler.NewWebAppHandler(webAppService)
	webAppModule := &WebAppModule{
		Handler: webAppHandler,
	}
	return webAppModule
}

// wire.go:

type Handler = handler.WebAppHandler

type WebAppModule struct {
	Handler *Handler
}

var WebAppSet = wire.NewSet(dao.NewWebAppDao, repository.NewWebAppRepo, service.NewWebAppService, handler.NewWebAppHandler)
